--- Economics.cs.orig	2022-01-23 05:00:17.272151072 -0600
+++ Economics.cs	2022-01-23 05:00:14.519180887 -0600
@@ -1,18 +1,17 @@
-//#define DEBUG
-
 using System;
 using System.Collections.Generic;
+using System.Data.SQLite;
+using System.IO;
 using System.Linq;
+using MySql.Data.MySqlClient;
 using Newtonsoft.Json;
 using Oxide.Core;
 using Oxide.Core.Configuration;
 using Oxide.Core.Libraries.Covalence;
 
-// TODO: Add SQLite and MySQL database support
-
 namespace Oxide.Plugins
 {
-    [Info("Economics", "Wulf", "3.9.1")]
+    [Info("Economics", "Wulf/RFC1920", "3.9.2")]
     [Description("Basic economics system and economy API")]
     public class Economics : CovalencePlugin
     {
@@ -23,22 +22,22 @@
         private class Configuration
         {
             [JsonProperty("Allow negative balance for accounts")]
-            public bool AllowNegativeBalance = false;
+            public bool AllowNegativeBalance;
 
             [JsonProperty("Balance limit for accounts (0 to disable)")]
-            public int BalanceLimit = 0;
+            public int BalanceLimit;
 
             [JsonProperty("Maximum balance for accounts (0 to disable)")] // TODO: From version 3.8.6; remove eventually
             private int BalanceLimitOld { set { BalanceLimit = value; } }
 
             [JsonProperty("Negative balance limit for accounts (0 to disable)")]
-            public int NegativeBalanceLimit = 0;
+            public int NegativeBalanceLimit;
 
             [JsonProperty("Remove unused accounts")]
             public bool RemoveUnused = true;
 
             [JsonProperty("Log transactions to file")]
-            public bool LogTransactions = false;
+            public bool LogTransactions;
 
             [JsonProperty("Starting account balance (0 or higher)")]
             public int StartingBalance = 1000;
@@ -47,11 +46,30 @@
             private int StartingBalanceOld { set { StartingBalance = value; } }
 
             [JsonProperty("Wipe balances on new save file")]
-            public bool WipeOnNewSave = false;
+            public bool WipeOnNewSave;
+
+            [JsonProperty("Store data in sqlite instead of data files")]
+            public bool useSQLite;
+
+            [JsonProperty("Store data in MySQL instead of data files")]
+            public bool useMySQL;
+
+            [JsonProperty("MySQL configuration, if using MySQL")]
+            public MySQLConfig mysql = new MySQLConfig();
 
             public string ToJson() => JsonConvert.SerializeObject(this);
 
             public Dictionary<string, object> ToDictionary() => JsonConvert.DeserializeObject<Dictionary<string, object>>(ToJson());
+
+            public VersionNumber Version;
+        }
+
+        private class MySQLConfig
+        {
+            public string server;
+            public string user;
+            public string pass;
+            public string database;
         }
 
         protected override void LoadDefaultConfig() => config = new Configuration();
@@ -78,6 +96,8 @@
                 LogWarning($"Configuration file {Name}.json is invalid; using defaults");
                 LoadDefaultConfig();
             }
+            config.Version = Version;
+            SaveConfig();
         }
 
         protected override void SaveConfig()
@@ -94,6 +114,10 @@
         private StoredData storedData;
         private bool changed;
 
+        private SQLiteConnection sqlConnection;
+        private MySqlConnection mysqlConnection;
+        private string connStr;
+
         private class StoredData
         {
             public readonly Dictionary<string, double> Balances = new Dictionary<string, double>();
@@ -198,6 +222,28 @@
             permission.RegisterPermission(permissionWithdrawAll, this);
             permission.RegisterPermission(permissionWipe, this);
 
+            bool emptydb = true;
+            if (config.useSQLite)
+            {
+                DynamicConfigFile dataFile = Interface.Oxide.DataFileSystem.GetDatafile(Name + "/economics");
+                dataFile.Save();
+                connStr = $"Data Source={Interface.Oxide.DataDirectory}{Path.DirectorySeparatorChar}{Name}{Path.DirectorySeparatorChar}Economics.db;";
+                sqlConnection = new SQLiteConnection(connStr);
+                sqlConnection.Open();
+                emptydb = CheckDB();
+            }
+            else if (config.useMySQL)
+            {
+                DynamicConfigFile dataFile = Interface.Oxide.DataFileSystem.GetDatafile(Name + "/economics");
+                dataFile.Save();
+                connStr = $"server={config.mysql.server};uid={config.mysql.user};pwd={config.mysql.pass};database={config.mysql.database};";
+                mysqlConnection = new MySqlConnection(connStr);
+                mysqlConnection.Open();
+                emptydb = CheckDB();
+            }
+
+            if ((!config.useMySQL && !config.useSQLite) || emptydb)
+            {
             // Load existing data and migrate old data format
             data = Interface.Oxide.DataFileSystem.GetFile(Name);
             try
@@ -255,6 +301,119 @@
             }
         }
 
+            if (config.useSQLite)
+            {
+                if (emptydb)
+                {
+                    // Migrate/import the datafile, if present
+                    foreach (KeyValuePair<string, double> s in storedData.Balances)
+                    {
+                        using (SQLiteConnection c = new SQLiteConnection(connStr))
+                        {
+                            c.Open();
+                            string query = $"INSERT INTO balances VALUES ('{s.Key}', {s.Value})";
+                            using (SQLiteCommand us = new SQLiteCommand(query, c))
+                            {
+                                us.ExecuteNonQuery();
+                            }
+                        }
+                    }
+                }
+                else if (config.RemoveUnused)
+                {
+                    Puts("Reading data from sqlite");
+                    // Read the storedData from SQLite
+                    storedData = new StoredData();
+                    using (SQLiteConnection c = new SQLiteConnection(connStr))
+                    {
+                        c.Open();
+                        using (SQLiteCommand rm = new SQLiteCommand("SELECT DISTINCT playerid, value FROM balances", c))
+                        using (SQLiteDataReader rd = rm.ExecuteReader())
+                        {
+                            while (rd.Read())
+                            {
+                                string pid = rd.GetString(0);
+                                double val = rd.GetDouble(1);
+                                storedData.Balances.Add(pid, val);
+                            }
+                        }
+                    }
+
+                    // Check for and remove any inactive player balance data
+                    foreach (string p in new List<string>(storedData.Balances.Keys))
+                    {
+                        if (storedData.Balances[p].Equals(config.StartingBalance))
+                        {
+                            using (SQLiteConnection c = new SQLiteConnection(connStr))
+                            {
+                                c.Open();
+                                using (SQLiteCommand rm = new SQLiteCommand($"DELETE FROM balances WHERE playerid='{p}'", c))
+                                {
+                                    rm.ExecuteNonQuery();
+                                }
+                            }
+                        }
+                    }
+                    storedData = new StoredData();
+                }
+            }
+            else if (config.useMySQL)
+            {
+                if (emptydb)
+                {
+                    // Migrate/import the datafile, if present
+                    foreach (KeyValuePair<string, double> s in storedData.Balances)
+                    {
+                        using (MySqlConnection c = new MySqlConnection(connStr))
+                        {
+                            c.Open();
+                            string query = $"INSERT INTO balances VALUES ('{s.Key}', {s.Value})";
+                            using (MySqlCommand us = new MySqlCommand(query, c))
+                            {
+                                us.ExecuteNonQuery();
+                            }
+                        }
+                    }
+                }
+                else if (config.RemoveUnused)
+                {
+                    Puts("Reading data from MySQL");
+                    storedData = new StoredData();
+                    using (MySqlConnection c = new MySqlConnection(connStr))
+                    {
+                        c.Open();
+                        using (MySqlCommand rm = new MySqlCommand("SELECT DISTINCT playerid, value FROM balances", c))
+                        using (MySqlDataReader rd = rm.ExecuteReader())
+                        {
+                            while (rd.Read())
+                            {
+                                string pid = rd.GetString(0);
+                                double val = rd.GetDouble(1);
+                                storedData.Balances.Add(pid, val);
+                            }
+                        }
+                    }
+
+                    // Check for and remove any inactive player balance data
+                    foreach (string p in new List<string>(storedData.Balances.Keys))
+                    {
+                        if (storedData.Balances[p].Equals(config.StartingBalance))
+                        {
+                            using (MySqlConnection c = new MySqlConnection(connStr))
+                            {
+                                c.Open();
+                                using (MySqlCommand rm = new MySqlCommand($"DELETE FROM balances WHERE playerid='{p}'", c))
+                                {
+                                    rm.ExecuteNonQuery();
+                                }
+                            }
+                        }
+                    }
+                    storedData = new StoredData();
+                }
+            }
+        }
+
         private void OnNewSave()
         {
             if (config.WipeOnNewSave)
@@ -265,6 +424,54 @@
             }
         }
 
+        private bool CheckDB()
+        {
+            // Return true if db was empty or non-existent
+            bool found = false;
+            if (config.useSQLite)
+            {
+                using (SQLiteConnection c = new SQLiteConnection(connStr))
+                {
+                    c.Open();
+                    using (SQLiteCommand r = new SQLiteCommand("SELECT name FROM sqlite_master WHERE type='table' AND name='balances'", c))
+                    using (SQLiteDataReader rentry = r.ExecuteReader())
+                    {
+                        while (rentry.Read()) { found = true; }
+                    }
+                }
+                if (!found)
+                {
+                    SQLiteCommand ct = new SQLiteCommand("DROP TABLE IF EXISTS balances", sqlConnection);
+                    ct.ExecuteNonQuery();
+                    ct = new SQLiteCommand("CREATE TABLE balances (playerid varchar(32), value DOUBLE DEFAULT 0)", sqlConnection);
+                    ct.ExecuteNonQuery();
+                    return true;
+                }
+            }
+            else if (config.useMySQL)
+            {
+                using (MySqlConnection c = new MySqlConnection(connStr))
+                {
+                    c.Open();
+                    using (MySqlCommand r = new MySqlCommand($"SELECT * FROM information_schema.tables WHERE table_schema='{config.mysql.database}' AND table_name='balances' LIMIT 1;", c))
+                    using (MySqlDataReader rentry = r.ExecuteReader())
+                    {
+                        while (rentry.Read()) { found = true; }
+                    }
+                }
+                if (!found)
+                {
+                    MySqlCommand ct = new MySqlCommand("DROP TABLE IF EXISTS balances", mysqlConnection);
+                    ct.ExecuteNonQuery();
+                    ct = new MySqlCommand("CREATE TABLE balances (playerid varchar(32), value DOUBLE DEFAULT 0)", mysqlConnection);
+                    ct.ExecuteNonQuery();
+                    return true;
+                }
+            }
+
+            return !found;
+        }
+
         #endregion Initialization
 
         #region API Methods
@@ -278,6 +485,40 @@
             }
 
             double playerData;
+            if (config.useSQLite)
+            {
+                using (SQLiteConnection c = new SQLiteConnection(connStr))
+                {
+                    c.Open();
+                    using (SQLiteCommand rm = new SQLiteCommand($"SELECT value FROM balances WHERE playerid='{playerId}'", c))
+                    using (SQLiteDataReader rd = rm.ExecuteReader())
+                    {
+                        while (rd.Read())
+                        {
+                            double val = rd.GetDouble(0);
+                            return val > config.StartingBalance ? val : config.StartingBalance;
+                        }
+                    }
+                }
+            }
+            else if (config.useMySQL)
+            {
+                using (MySqlConnection c = new MySqlConnection(connStr))
+                {
+                    c.Open();
+                    using (MySqlCommand rm = new MySqlCommand($"SELECT value FROM balances WHERE playerid='{playerId}'", c))
+                    {
+                        using (MySqlDataReader rd = rm.ExecuteReader())
+                        {
+                            while (rd.Read())
+                            {
+                                double val = rd.GetDouble(0);
+                                return val > config.StartingBalance ? val : config.StartingBalance;
+                            }
+                        }
+                    }
+                }
+            }
             return storedData.Balances.TryGetValue(playerId, out playerData) ? playerData : config.StartingBalance;
         }
 
@@ -328,8 +569,35 @@
                     amount = config.NegativeBalanceLimit;
                 }
 
+                if (config.useSQLite)
+                {
+                    using (SQLiteConnection c = new SQLiteConnection(connStr))
+                    {
+                        c.Open();
+                        string query = $"UPDATE balances SET value = {amount} WHERE playerid='{playerId}'";
+                        using (SQLiteCommand us = new SQLiteCommand(query, c))
+                        {
+                            us.ExecuteNonQuery();
+                        }
+                    }
+                }
+                else if (config.useMySQL)
+                {
+                    using (MySqlConnection c = new MySqlConnection(connStr))
+                    {
+                        c.Open();
+                        string query = $"UPDATE balances SET value = {amount} WHERE playerid='{playerId}'";
+                        using (MySqlCommand us = new MySqlCommand(query, c))
+                        {
+                            us.ExecuteNonQuery();
+                        }
+                    }
+                }
+                else
+                {
                 storedData.Balances[playerId] = amount;
                 changed = true;
+                }
 
                 Interface.Call("OnEconomicsBalanceUpdated", playerId, amount);
                 Interface.CallDeprecatedHook("OnBalanceChanged", "OnEconomicsBalanceUpdated", new System.DateTime(2022, 7, 1), playerId, amount);
@@ -412,7 +680,7 @@
 
         private void CommandBalance(IPlayer player, string command, string[] args)
         {
-            if (args != null && args.Length > 0)
+            if (args?.Length > 0)
             {
                 if (!player.HasPermission(permissionBalance))
                 {
@@ -476,6 +744,52 @@
                 }
 
                 int receivers = 0;
+                if (config.useSQLite)
+                {
+                    using (SQLiteConnection c = new SQLiteConnection(connStr))
+                    {
+                        c.Open();
+                        string query = $"UPDATE balances SET value=value + {amount}";
+                        using (SQLiteCommand us = new SQLiteCommand(query, c))
+                        {
+                            us.ExecuteNonQuery();
+                        }
+
+                        using (SQLiteCommand rm = new SQLiteCommand("SELECT COUNT(*) FROM balances", c))
+                        using (SQLiteDataReader rd = rm.ExecuteReader())
+                        {
+                            while (rd.Read())
+                            {
+                                receivers = rd.GetInt32(0);
+                            }
+                        }
+                    }
+                    Message(player, "DepositedToAll", amount * receivers, amount, receivers);
+                    return;
+                }
+                else if (config.useMySQL)
+                {
+                    using (MySqlConnection c = new MySqlConnection(connStr))
+                    {
+                        c.Open();
+                        string query = $"UPDATE balances SET value=value + {amount}";
+                        using (MySqlCommand us = new MySqlCommand(query, c))
+                        {
+                            us.ExecuteNonQuery();
+                        }
+
+                        using (MySqlCommand rm = new MySqlCommand("SELECT COUNT(*) FROM balances", c))
+                        using (MySqlDataReader rd = rm.ExecuteReader())
+                        {
+                            while (rd.Read())
+                            {
+                                receivers = rd.GetInt32(0);
+                            }
+                        }
+                    }
+                    Message(player, "DepositedToAll", amount * receivers, amount, receivers);
+                    return;
+                }
                 foreach (string targetId in storedData.Balances.Keys.ToList())
                 {
                     if (Deposit(targetId, amount))
@@ -540,6 +854,52 @@
                 }
 
                 int receivers = 0;
+                if (config.useSQLite)
+                {
+                    using (SQLiteConnection c = new SQLiteConnection(connStr))
+                    {
+                        c.Open();
+                        string query = $"UPDATE balances SET value={amount}";
+                        using (SQLiteCommand us = new SQLiteCommand(query, c))
+                        {
+                            us.ExecuteNonQuery();
+                        }
+
+                        using (SQLiteCommand rm = new SQLiteCommand("SELECT COUNT(*) FROM balances", c))
+                        using (SQLiteDataReader rd = rm.ExecuteReader())
+                        {
+                            while (rd.Read())
+                            {
+                                receivers = rd.GetInt32(0);
+                            }
+                        }
+                    }
+                    Message(player, "SetBalanceForAll", amount, receivers);
+                    return;
+                }
+                else if (config.useMySQL)
+                {
+                    using (MySqlConnection c = new MySqlConnection(connStr))
+                    {
+                        c.Open();
+                        string query = $"UPDATE balances SET value={amount}";
+                        using (MySqlCommand us = new MySqlCommand(query, c))
+                        {
+                            us.ExecuteNonQuery();
+                        }
+
+                        using (MySqlCommand rm = new MySqlCommand("SELECT COUNT(*) FROM balances", c))
+                        using (MySqlDataReader rd = rm.ExecuteReader())
+                        {
+                            while (rd.Read())
+                            {
+                                receivers = rd.GetInt32(0);
+                            }
+                        }
+                    }
+                    Message(player, "SetBalanceForAll", amount, receivers);
+                    return;
+                }
                 foreach (string targetId in storedData.Balances.Keys.ToList())
                 {
                     if (SetBalance(targetId, amount))
@@ -692,6 +1052,53 @@
                 }
 
                 int receivers = 0;
+                if (config.useSQLite)
+                {
+                    using (SQLiteConnection c = new SQLiteConnection(connStr))
+                    {
+                        c.Open();
+                        string query = $"UPDATE balances SET value=value - {amount}";
+                        using (SQLiteCommand us = new SQLiteCommand(query, c))
+                        {
+                            us.ExecuteNonQuery();
+                        }
+
+                        using (SQLiteCommand rm = new SQLiteCommand("SELECT COUNT(*) FROM balances", c))
+                        using (SQLiteDataReader rd = rm.ExecuteReader())
+                        {
+                            while (rd.Read())
+                            {
+                                receivers = rd.GetInt32(0);
+                            }
+                        }
+                    }
+                    Message(player, "WithdrawnForAll", amount * receivers, amount, receivers);
+                    return;
+                }
+                else if (config.useMySQL)
+                {
+                    using (MySqlConnection c = new MySqlConnection(connStr))
+                    {
+                        c.Open();
+                        string query = $"UPDATE balances SET value=value - {amount}";
+                        using (MySqlCommand us = new MySqlCommand(query, c))
+                        {
+                            us.ExecuteNonQuery();
+                        }
+
+                        using (MySqlCommand rm = new MySqlCommand("SELECT COUNT(*) FROM balances", c))
+                        using (MySqlDataReader rd = rm.ExecuteReader())
+                        {
+                            while (rd.Read())
+                            {
+                                receivers = rd.GetInt32(0);
+                            }
+                        }
+                    }
+                    Message(player, "WithdrawnForAll", amount * receivers, amount, receivers);
+                    return;
+                }
+
                 foreach (string targetId in storedData.Balances.Keys.ToList())
                 {
                     if (Withdraw(targetId, amount))
@@ -732,6 +1139,35 @@
                 return;
             }
 
+            if (config.useSQLite)
+            {
+                using (SQLiteConnection c = new SQLiteConnection(connStr))
+                {
+                    c.Open();
+                    using (SQLiteCommand us = new SQLiteCommand("DELETE FROM balances", c))
+                    {
+                        us.ExecuteNonQuery();
+                    }
+                }
+                Message(player, "DataWiped");
+                Interface.Call("OnEconomicsDataWiped", player);
+                return;
+            }
+            else if (config.useMySQL)
+            {
+                using (MySqlConnection c = new MySqlConnection(connStr))
+                {
+                    c.Open();
+                    using (MySqlCommand us = new MySqlCommand("DELETE FROM balances", c))
+                    {
+                        us.ExecuteNonQuery();
+                    }
+                }
+                Message(player, "DataWiped");
+                Interface.Call("OnEconomicsDataWiped", player);
+                return;
+            }
+
             storedData = new StoredData();
             changed = true;
             SaveData();
@@ -769,18 +1205,14 @@
         {
             foreach (string language in lang.GetLanguages(this))
             {
-                Dictionary<string, string> messages = lang.GetMessages(language, this);
-                foreach (KeyValuePair<string, string> message in messages)
-                {
-                    if (message.Key.Equals(command))
+                foreach (KeyValuePair<string, string> message in lang.GetMessages(language, this))
                     {
-                        if (!string.IsNullOrEmpty(message.Value))
+                    if (message.Key.Equals(command) && !string.IsNullOrEmpty(message.Value))
                         {
                             AddCovalenceCommand(message.Value, command);
                         }
                     }
                 }
-            }
         }
 
         private string GetLang(string langKey, string playerId = null, params object[] args)
